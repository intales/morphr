// Copyright (c) 2025 Intales Srl. All rights reserved.
// Use of this source code is governed by a MIT license that can be found
// in the LICENSE file.

//ignore_for_file:avoid_print
import 'dart:io';

import 'package:args/command_runner.dart';
import 'package:interact/interact.dart';
import 'package:morphr/cloud/morphr_cloud_client.dart';
import '../helpers/config_helper.dart';
import '../client.dart';
import 'sync.dart';

class InitCommand extends Command {
  @override
  final name = 'init';
  @override
  final description = 'Initialize a Morphr project and link it to a Figma file';

  InitCommand() {
    argParser
      ..addOption(
        'figma-url',
        abbr: 'f',
        help: 'URL of your Figma file',
      )
      ..addOption(
        'server',
        abbr: 's',
        help: 'Morphr Cloud server (only for testing)',
        defaultsTo: 'https://cloud.morphr.dev',
      );
  }

  @override
  Future<void> run() async {
    var figmaUrl = argResults?['figma-url'] as String?;
    final server = argResults?['server'] as String;
    final client = getClient(server: server);

    final token = ConfigHelper.getToken();
    if (token == null) {
      print(
          '❌ No authentication token found. Please login first with: "morphr login" or "morphr register"');
      exit(1);
    }

    figmaUrl ??= Input(
      prompt: '🔗 Paste your Figma file URL',
      validator: (value) {
        if (value.isEmpty) {
          throw ValidationError('❌ URL cannot be empty');
        }
        if (!value.contains('figma.com')) {
          throw ValidationError('❌ Not a valid Figma URL');
        }
        return true;
      },
    ).interact();

    final figmaFileId = _extractFigmaFileId(figmaUrl);
    if (figmaFileId == null) {
      print(
          '❌ Could not extract file ID from URL. Please check the URL and try again.');
      exit(1);
    }

    print('🔍 Verifying access to Figma file...');
    final isAccessible = await _verifyFileAccess(
      client: client,
      fileId: figmaFileId,
    );
    if (!isAccessible) {
      print('❌ Could not access this Figma file.');
      print(
          'Make sure you have linked your Figma account and have access to the file.');
      exit(1);
    }

    final fileDetails = await _getFileDetails(
      client: client,
      fileId: figmaFileId,
    );
    final fileName = fileDetails?['name'] ?? 'Flutter Project';

    final projectName = Input(
      prompt: '📝 Enter a name for your Morphr project',
      defaultValue: fileName,
    ).interact();

    print('🚀 Creating project on Morphr Cloud...');
    final project = await _createProject(
      client: client,
      name: projectName,
      figmaFileId: figmaFileId,
    );
    if (project == null) {
      exit(1);
    }

    final projectId = project["projectId"] as int;

    print('🔄 Syncing project...');
    await _syncProject(
      server: server,
      projectId: projectId,
    );

    final directory = Directory('lib');
    if (!await directory.exists()) {
      await directory.create(recursive: true);
    }

    final configFile = File('lib/morphr_options.dart');
    await configFile.writeAsString('''
// File generated by Morphr CLI - do not modify manually
import 'package:morphr/morphr.dart';

/// Default Morphr configuration for this project
const morphrOptions = MorphrCloudOptions(
  projectId: "$projectId",
  endpoint: "$server",
  clientId:"${project["credentials"]["clientId"]}",
  clientSecret:"${project["credentials"]["clientSecret"]}",
);
''');

    print('✅ Morphr project initialized successfully!');
    print('📂 Configuration file generated at lib/morphr_options.dart');
    print('📝 Now add Morphr to your Flutter app:');
    print('''
1. Update your main.dart:

  import 'package:morphr/morphr.dart';
  import 'package:your_app/morphr_options.dart';
  
  void main() async {
    WidgetsFlutterBinding.ensureInitialized();
    
    // Initialize Morphr with your configuration
    await MorphrService.instance.initializeCloud(options: morphrOptions);
    
    runApp(MyApp());
  }

2. Run your app and start creating great UIs with Morphr!
''');
  }

  String? _extractFigmaFileId(String url) {
    final designRegex = RegExp(r'figma\.com/design/([a-zA-Z0-9]+)');
    final designMatch = designRegex.firstMatch(url);
    if (designMatch != null && designMatch.groupCount >= 1) {
      return designMatch.group(1);
    }

    return null;
  }

  Future<bool> _verifyFileAccess({
    required final MorphrCloudClient client,
    required final String fileId,
  }) async {
    try {
      await client.get("figma/$fileId/verify");
      return true;
    } catch (e) {
      print('Error verifying file access: $e');
      return false;
    }
  }

  Future<Map<String, dynamic>?> _getFileDetails({
    required final MorphrCloudClient client,
    required final String fileId,
  }) async {
    try {
      final response = await client.get("figma/$fileId/details");
      return response;
    } catch (e) {
      print('Error getting file details: $e');
      return null;
    }
  }

  Future<Map<String, dynamic>?> _createProject({
    required final MorphrCloudClient client,
    required final String name,
    required final String figmaFileId,
  }) async {
    try {
      final response = await client.post(
        "projects/create",
        body: {
          "name": name,
          "figmaFileId": figmaFileId,
        },
      );

      return response;
    } catch (e) {
      print('Error creating project: $e');
      return null;
    }
  }

  Future<void> _syncProject({
    required final String server,
    required final int projectId,
  }) async {
    try {
      final runner = CommandRunner('morphr', 'CLI tool for Morphr library')
        ..addCommand(SyncCommand());
      runner.run(['sync', '-s', server, '-p', projectId.toString()]);
    } catch (e) {
      print('Error syncing project: $e');
    }
  }
}

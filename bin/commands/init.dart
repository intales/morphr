import 'dart:convert';
import 'dart:io';

import 'package:args/command_runner.dart';
import 'package:interact/interact.dart';
import 'package:http/http.dart' as http;
import '../helpers/config_helper.dart';

class InitCommand extends Command {
  @override
  final name = 'init';
  @override
  final description = 'Initialize a Morphr project and link it to a Figma file';

  InitCommand() {
    argParser
      ..addOption(
        'figma-url',
        abbr: 'f',
        help: 'URL of your Figma file',
      )
      ..addOption(
        'server',
        abbr: 's',
        help: 'Morphr Cloud server (only for testing)',
        defaultsTo: 'https://cloud.morphr.dev',
      );
  }

  @override
  Future<void> run() async {
    var figmaUrl = argResults?['figma-url'] as String?;
    final server = argResults?['server'] as String;

    print('\n🎨 Welcome to Morphr! Let\'s set up your project.\n');

    final token = ConfigHelper.getToken();
    if (token == null) {
      print(
          '❌ No authentication token found. Please login first with: morphr login');
      exit(1);
    }

    figmaUrl ??= Input(
      prompt: '🔗 Paste your Figma file URL',
      validator: (value) {
        if (value.isEmpty) {
          throw ValidationError('❌ URL cannot be empty');
        }
        if (!value.contains('figma.com')) {
          throw ValidationError('❌ Not a valid Figma URL');
        }
        return true;
      },
    ).interact();

    final figmaFileId = _extractFigmaFileId(figmaUrl);
    if (figmaFileId == null) {
      print(
          '\n❌ Could not extract file ID from URL. Please check the URL and try again.');
      exit(1);
    }

    print('\n🔍 Verifying access to Figma file...');
    final isAccessible = await _verifyFileAccess(server, token, figmaFileId);
    if (!isAccessible) {
      print('\n❌ Could not access this Figma file.');
      print(
          'Make sure you have linked your Figma account and have access to the file.');
      exit(1);
    }

    final fileDetails = await _getFileDetails(server, token, figmaFileId);
    final fileName = fileDetails?['name'] ?? 'Flutter Project';

    final projectName = Input(
      prompt: '📝 Enter a name for your Morphr project',
      defaultValue: fileName,
    ).interact();

    print('\n🚀 Creating project on Morphr Cloud...');
    final projectId =
        await _createProject(server, token, projectName, figmaFileId);
    if (projectId == null) {
      print('\n❌ Failed to create project on Morphr Cloud.');
      exit(1);
    }

    final directory = Directory('lib');
    if (!await directory.exists()) {
      await directory.create(recursive: true);
    }

    final configFile = File('lib/morphr_options.dart');
    await configFile.writeAsString('''
// File generated by Morphr CLI - do not modify manually

/// Morphr configuration options
class MorphrOptions {
  /// Project ID in Morphr Cloud
  final String projectId;
  
  /// Creates a new MorphrOptions instance
  const MorphrOptions({
    required this.projectId,
  });
}

/// Default Morphr configuration for this project
const morphrOptions = MorphrOptions(
  projectId: "$projectId",
);
''');

    print('\n✅ Morphr project initialized successfully!');
    print('\n📂 Configuration file generated at lib/morphr_options.dart');
    print('\n📝 Now add Morphr to your Flutter app:');
    print('''
1. Update your main.dart:

  import 'package:morphr/morphr.dart';
  import 'package:your_app/morphr_options.dart';
  
  void main() async {
    WidgetsFlutterBinding.ensureInitialized();
    
    // Initialize Morphr with your configuration
    await MorphrService.instance.initialize(options: morphrOptions);
    
    runApp(MyApp());
  }

2. Run your app and start creating great UI with Morphr!
''');
  }

  String? _extractFigmaFileId(String url) {
    final designRegex = RegExp(r'figma\.com/design/([a-zA-Z0-9]+)');
    final designMatch = designRegex.firstMatch(url);
    if (designMatch != null && designMatch.groupCount >= 1) {
      return designMatch.group(1);
    }

    return null;
  }

  Future<bool> _verifyFileAccess(
      String server, String token, String fileId) async {
    try {
      final response = await http.get(
        Uri.parse('$server/figma/$fileId/verify'),
        headers: {'Authorization': 'Bearer $token'},
      );

      return response.statusCode == 200;
    } catch (e) {
      print('Error verifying file access: $e');
      return false;
    }
  }

  Future<Map<String, dynamic>?> _getFileDetails(
      String server, String token, String fileId) async {
    try {
      final response = await http.get(
        Uri.parse('$server/figma/$fileId/details'),
        headers: {'Authorization': 'Bearer $token'},
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      }
      return null;
    } catch (e) {
      print('Error getting file details: $e');
      return null;
    }
  }

  Future<String?> _createProject(
      String server, String token, String name, String figmaFileId) async {
    try {
      final response = await http.post(
        Uri.parse('$server/projects/create'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'name': name,
          'figmaFileId': figmaFileId,
        }),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return data['projectId'].toString();
      }
      return null;
    } catch (e) {
      print('Error creating project: $e');
      return null;
    }
  }
}
